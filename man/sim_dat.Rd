% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_dat.R
\name{sim_dat}
\alias{sim_dat}
\title{Simulate Multi-dimensional Functional Data with I-prior}
\usage{
sim_dat(N, Ntrain, kernels, kernels_params, alpha, dat_T, control = list())
}
\arguments{
\item{N}{Total sample size}

\item{Ntrain}{Training sample size.}

\item{kernels}{List of kernel functions for each mode}

\item{kernels_params}{List of parameters for each kernel function}

\item{alpha}{Vector of scale parameters for \code{kernels}}

\item{dat_T}{List of index sets for each mode}

\item{control}{A list of control parameters (see Details)}
}
\value{
A list containing:
\itemize{
\item X: Simulated covariate data
\item y: Simulated response vector
}
}
\description{
Generates simulated data for multi-dimensional functional regression models using
I-prior methodology.
}
\details{
The \code{control} argument can include the following parameters:
\itemize{
  \item \code{tau}: Scale parameter for the I-prior kernel (default: 1)
  \item \code{intercept_y}: Intercept term for response (default: 0)
  \item \code{intercept_x}: Intercept term for covariates (default: 0)
  \item \code{kernel_iprior}: Type of I-prior kernel ('cfbm', 'rbf', 'linear' or 'poly') (default: 'cfbm')
  \item \code{iprior_param}: Parameter for I-prior kernel (Hurst for cfbm, lengthscale for rbf) (default: NULL)
  \item \code{sigma_v}: Standard deviation for random effects (default: 1)
  \item \code{sigma}: Noise standard deviation (default: 1)
  \item \code{sigma_w}: Standard deviation for weights (default: NULL, which sets it to 1/sigma)
  \item \code{constant}: Logical indicating whether to include constant kernel term (default: TRUE)
  \item \code{center}: Whether to center the kernel matrices (default: FALSE)
  \item \code{os_type}: Operating system type ('Apple' or 'Windows') (default: 'Apple')
  \item \code{cores}: Number of cores used in parallel computation (default: NULL)
}
}
\examples{
# 2D example
set.seed(1)
dat_T <- list(1:3, 1:2)
sim_dat(kernels = list(cfbm, rbf), kernels_params = list(0.5, 1),
        alpha = c(0.5, 0.5), dat_T = dat_T, N = 10, Ntrain = 5)

# 3D example with control parameters
set.seed(1)
dat_T <- list(1:3, 1:2, 1:4)
sim_dat(kernels = list(cfbm, cfbm, cfbm), kernels_params = list(0.5, 0.5,0.5),
        alpha = c(0.5, 0.5, 0.5), dat_T = dat_T, N = 10, Ntrain = 5,
        control = list(kernel_iprior = 'rbf', sigma = 0.5))

}
